create database historian;
create schema tsc;

-- ************************************** OPS_HB.iot_base_second
CREATE or replace TABLE base_second
(
 second_index number(19,0) NOT NULL,
 TM           time(9) NOT NULL,
 S2           number(26,0),
 S3           number(26,0),
 S4           number(26,0),
 S5           number(26,0),
 S10          number(26,0),
 S15          number(26,0),
 S20          number(26,0),
 S30          number(26,0),
 M1           number(26,0),
 M2           number(26,0),
 M3           number(26,0),
 M5           number(26,0),
 M10          number(26,0),
 M15          number(26,0),
 M20          number(26,0),
 M30          number(26,0),
 H1           number(26,0),
 H2           number(26,0),
 H3           number(26,0),
 H4           number(26,0),
 H6           number(26,0),
 H12          number(26,0),
 S1M          number(1,0),
 S2M          number(1,0),
 S3M          number(1,0),
 S4M          number(1,0),
 S5M          number(1,0),
 S10M         number(1,0),
 S15M         number(1,0),
 S20M         number(1,0),
 S30M         number(1,0),
 M1M          number(1,0),
 M2M          number(1,0),
 M3M          number(1,0),
 M5M          number(1,0),
 M10M         number(1,0),
 M15M         number(1,0),
 M20M         number(1,0),
 M30M         number(1,0),
 H1M          number(1,0),
 H2M          number(1,0),
 H3M          number(1,0),
 H4M          number(1,0),
 H6M          number(1,0),
 H12M         number(1,0),
 D1M          number(1,0),
 hour_index   integer NOT NULL,
 minute_index integer NOT NULL,

 CONSTRAINT PK_1 PRIMARY KEY ( second_index )
)
COMMENT = 'The base second table holds 86400 rows and is designed to assist with standard  aggregating functions used in time series.  It essentially assists with using a simpler, set based approach to calculations involving time series values.';

-- ************************************** OPS_HB.iot_base_millisecond
CREATE TABLE base_millisecond
(
 ms_index number(19,0) NOT NULL,
 MS2      number(26,0),
 MS4      number(26,0),
 MS5      number(26,0),
 MS6      number(26,0),
 MS8      number(26,0),
 MS10     number(26,0),
 MS15     number(26,0),
 MS20     number(26,0),
 MS30     number(26,0),
 MS40     number(26,0),
 MS50     number(26,0),
 MS100    number(26,0),
 MS200    number(26,0),
 MS250    number(26,0),
 MS300    number(26,0),
 MS400    number(26,0),
 MS500    number(26,0),
 INCLUDE  number(1,0),
 MS2M     number(1,0),
 MS4M     number(1,0),
 MS5M     number(1,0),
 MS6M     number(1,0),
 MS8M     number(1,0),
 MS10M    number(1,0),
 MS15M    number(1,0),
 MS20M    number(1,0),
 MS30M    number(1,0),
 MS40M    number(1,0),
 MS50M    number(1,0),
 MS100M   number(1,0),
 MS200M   number(1,0),
 MS250M   number(1,0),
 MS300M   number(1,0),
 MS400M   number(1,0),
 MS500M   number(1,0),

 CONSTRAINT PK_1 PRIMARY KEY ( ms_index )
)
COMMENT = 'For millisecond level aggregations.  Note that there is one row added to this table that has null values - so it contains 1001 rows.';

-- ************************************** OPS_HB.iot_base_day
CREATE TABLE base_day
(
 day_index      integer NOT NULL,
 date_value     date NOT NULL,
 day_name       varchar NOT NULL,
 month_name     varchar NOT NULL,
 eom            date NOT NULL COMMENT 'end of month',
 year           integer NOT NULL,
 year_month     integer NOT NULL COMMENT '1-12',
 year_half      integer NOT NULL COMMENT '1 or 2',
 year_quarter   integer NOT NULL COMMENT '1, 2, 3, 4',
 year_week      integer NOT NULL,
 year_day       integer NOT NULL,
 days_in_month  integer NOT NULL,
 dofw_sun_start integer NOT NULL,
 dofw_sat_start integer NOT NULL,
 dofw_fri_start integer NOT NULL,
 dofw_thu_start integer NOT NULL,
 dofw_wed_start integer NOT NULL,
 dofw_tue_start integer NOT NULL,
 dofw_mon_start integer NOT NULL,
 eow_sun_start  date NOT NULL COMMENT 'end of week - ending Tuesday',
 eow_sat_start  date NOT NULL COMMENT 'end of week - ending Wednesday',
 eow_fri_start  date NOT NULL COMMENT 'end of week - ending Thursday',
 eow_thu_start  date NOT NULL COMMENT 'end of week - ending Friday',
 eow_wed_start  date NOT NULL COMMENT 'end of week - ending Saturday',
 eow_tue_start  date NOT NULL COMMENT 'end of week - ending Sunday',
 eow_mon_start  date NOT NULL COMMENT 'end of week - ending Monday',

 CONSTRAINT PK_1 PRIMARY KEY ( day_index )
)
COMMENT = 'Table for ALL days';



insert into base_day (select
    n day_index,
    dateadd(day, n-1, to_date('1/1/1900', 'MM/DD/YYYY')) date_value,
    dayname(date_value) day_name,
    monthname(date_value) month_name,
    last_day(date_value) eom,
    year(date_value) year,
    month(date_value) year_month,
    case when year_month < 7 then 1 else 2 end year_half,
    case when year_month < 4 then 1 when year_month between 4 and 6 then 2 when year_month between 7 and 9 then 3 else 4 end year_quarter,
    week(date_value) year_week,
    day(date_value) year_day,
    dayofmonth(eom) days_in_month,
    dayofweek(date_value) dofw_sun,
    dayofweek(dateadd(day, 1, date_value)) dofw_sat,
    dayofweek(dateadd(day, 2, date_value)) dofw_fri,
    dayofweek(dateadd(day, 3, date_value)) dofw_thu,
    dayofweek(dateadd(day, 4, date_value)) dofw_wed,
    dayofweek(dateadd(day, 5, date_value)) dofw_tue,
    dayofweek(dateadd(day, 6, date_value)) dofw_mon,
    decode(dofw_sun, 0, date_value, dateadd(day, 7 - dofw_sun, date_value)) eow_sun,
    decode(dofw_sun, 0, date_value, dateadd(day, 7 - dofw_sat, date_value)) eow_sat,
    decode(dofw_fri, 0, date_value, dateadd(day, 7 - dofw_fri, date_value)) eow_fri,
    decode(dofw_thu, 0, date_value, dateadd(day, 7 - dofw_thu, date_value)) eow_thu,
    decode(dofw_fri, 0, date_value, dateadd(day, 7 - dofw_wed, date_value)) eow_wed,
    decode(dofw_fri, 0, date_value, dateadd(day, 7 - dofw_tue, date_value)) eow_tue,
    decode(dofw_fri, 0, date_value, dateadd(day, 7 - dofw_mon, date_value)) eow_mon
from
    (select row_number() over (order by seq4()) n from table(generator(rowcount => 100000))));
 
 
insert into base_millisecond (select
    n-1 ms_index,
    trunc((n - 1) / 2) ms2,
    trunc((n - 1) / 4) ms4,
    trunc((n - 1) / 5) ms5,
    trunc((n - 1) / 6) ms6,
    trunc((n - 1) / 8) ms8,
    trunc((n - 1) / 10) ms10,
    trunc((n - 1) / 15) ms15,
    trunc((n - 1) / 20) ms20,
    trunc((n - 1) / 30) ms30,
    trunc((n - 1) / 40) ms40,
    trunc((n - 1) / 50) ms50,
    trunc((n - 1) / 100) ms100,
    trunc((n - 1) / 200) ms200,
    trunc((n - 1) / 250) ms250,
    trunc((n - 1) / 300) ms300,
    trunc((n - 1) / 400) ms400,
    trunc((n - 1) / 500) ms500,
    1 include,
    iff(ms_index = 0, 0, iff(ms2 <> trunc((n - 2) / 2), 0, 1)) ms2m,
    iff(ms_index = 0, 0, iff(ms4 <> trunc((n - 2) / 4), 0, 1)) ms4m,
    iff(ms_index = 0, 0, iff(ms5 <> trunc((n - 2) / 5), 0, 1)) ms5m,
    iff(ms_index = 0, 0, iff(ms6 <> trunc((n - 2) / 6), 0, 1)) ms6m,
    iff(ms_index = 0, 0, iff(ms8 <> trunc((n - 2) / 8), 0, 1)) ms8m,
    iff(ms_index = 0, 0, iff(ms10 <> trunc((n - 2) / 10), 0, 1)) ms10m,
    iff(ms_index = 0, 0, iff(ms15 <> trunc((n - 2) / 15), 0, 1)) ms15m,
    iff(ms_index = 0, 0, iff(ms20 <> trunc((n - 2) / 20), 0, 1)) ms20m,
    iff(ms_index = 0, 0, iff(ms30 <> trunc((n - 2) / 30), 0, 1)) ms30m,
    iff(ms_index = 0, 0, iff(ms40 <> trunc((n - 2) / 40), 0, 1)) ms40m,
    iff(ms_index = 0, 0, iff(ms50 <> trunc((n - 2) / 50), 0, 1)) ms50m,
    iff(ms_index = 0, 0, iff(ms100 <> trunc((n - 2) / 100), 0, 1)) ms100m,
    iff(ms_index = 0, 0, iff(ms200 <> trunc((n - 2) / 200), 0, 1)) ms200m,
    iff(ms_index = 0, 0, iff(ms250 <> trunc((n - 2) / 250), 0, 1)) ms250m,
    iff(ms_index = 0, 0, iff(ms300 <> trunc((n - 2) / 300), 0, 1)) ms300m,
    iff(ms_index = 0, 0, iff(ms400 <> trunc((n - 2) / 400), 0, 1)) ms400m,
    iff(ms_index = 0, 0, iff(ms500 <> trunc((n - 2) / 500), 0, 1)) ms500m
from
    (select row_number() over (order by seq4()) n from table(generator(rowcount => 1000)))
union all
    select 0 ms_index,
    null ms2,
    null ms4,
    null ms5,
    null ms6,
    null ms8,
    null ms10,
    null ms15,
    null ms22,
    null ms30,
    null ms40,
    null ms50,
    null ms100,
    null ms200,
    null ms250,
    null ms300,
    null ms400,
    null ms500,
    0 include,
    null ms2m,
    null ms4m,
    null ms5m,
    null ms6m,
    null ms8m,
    null ms10m,
    null ms15m,
    null ms20m,
    null ms30m,
    null ms40m,
    null ms50m,
    null ms100m,
    null ms200m,
    null ms250m,
    null ms300m,
    null ms400m,
    null ms500m
);

insert into base_second (
select
    n-1 second_index,
    to_time(to_char(n-1)) tm,
    trunc((n - 1) / 2) s2,
    trunc((n - 1) / 3) s3,
    trunc((n - 1) / 4) s4,
    trunc((n - 1) / 5) s5,
    trunc((n - 1) / 10) s10,
    trunc((n - 1) / 15) s15,
    trunc((n - 1) / 20) s20,
    trunc((n - 1) / 30) s30,
    trunc((n - 1) / 60) m1,
    trunc((n - 1) / (2 * 60)) m2,
    trunc((n - 1) / (3 * 60)) m3,    
    trunc((n - 1) / (5 * 60)) m5,
    trunc((n - 1) / (10 * 60)) m10,
    trunc((n - 1) / (15 * 60)) m15,
    trunc((n - 1) / (20 * 60)) m20,
    trunc((n - 1) / (30 * 60)) m30,
    trunc((n - 1) / (1 * 60 * 60)) h1,
    trunc((n - 1) / (2 * 60 * 60)) h2,
    trunc((n - 1) / (3 * 60 * 60)) h3,
    trunc((n - 1) / (4 * 60 * 60)) h4,
    trunc((n - 1) / (6 * 60 * 60)) h6,
    trunc((n - 1) / (12 * 60 * 60)) h12,
    0 s1m,
    iff(mod(n-1, 2) = 0, 0, 1) s2m,
    iff(mod(n-1, 3) = 0, 0, 1) s3m,
    iff(mod(n-1, 4) = 0, 0, 1) s4m,
    iff(mod(n-1, 5) = 0, 0, 1) s5m,
    iff(mod(n-1, 10) = 0, 0, 1) s10m,
    iff(mod(n-1, 15) = 0, 0, 1) s15m,
    iff(mod(n-1, 20) = 0, 0, 1) s20m,
    iff(mod(n-1, 30) = 0, 0, 1) s30m,
    iff(mod(n-1, 60) = 0, 0, 1) m1m,
    iff(mod(n-1, 120) = 0, 0, 1) m2m,
    iff(mod(n-1, 180) = 0, 0, 1) m3m,
    iff(mod(n-1, 300) = 0, 0, 1) m5m,
    iff(mod(n-1, 600) = 0, 0, 1) m10m,
    iff(mod(n-1, 900) = 0, 0, 1) m15m,
    iff(mod(n-1, 1200) = 0, 0, 1) m20m,
    iff(mod(n-1, 1800) = 0, 0, 1) m30m,
    iff(mod(n-1, 3600) = 0, 0, 1) h1m,
    iff(mod(n-1, 7200) = 0, 0, 1) h2m,
    iff(mod(n-1, 10800) = 0, 0, 1) h3m,
    iff(mod(n-1, 14400) = 0, 0, 1) h4m,
    iff(mod(n-1, 21600) = 0, 0, 1) h6m,
    iff(mod(n-1, 43200) = 0, 0, 1) h12m,
    iff(mod(n-1, 86400) = 0, 0, 1) d1m,
    hour(tm) hour_index,
    minute(tm) minute_index
from
    (select row_number() over (order by seq4()) n from table(generator(rowcount => 86400)))
);


create table tag (tag_uid integer, tagname varchar, dscr varchar);
create table tag_value (tag_uid integer, tstamp timestamp_ntz, val float, d date, day_index integer, second_index integer, ms_index integer);

insert into tag (tag_uid, tagname, dscr) values(20, 'fast_sine','sin(r)*100 + 100');
insert into tag (tag_uid, tagname, dscr) values(22, 'slow_sine','sin(r)*100 + 100');
insert into tag (tag_uid, tagname, dscr) values(26, 'sawtooth','mod(t/100, 10)*10');
insert into tag (tag_uid, tagname, dscr) values(21, 'sine_square','Sin(2 * Sin(2 * Sin(2 * Sin(r))))* 100 + 100');
insert into tag (tag_uid, tagname, dscr) values(24, 'complex_sinusoid','(sin(2*r)+sin(4*r)/2+sin(8*r)/4)*100 + 100');
insert into tag (tag_uid, tagname, dscr) values(25, 'complex_sinusoid_noisy','((sin(2*r)+sin(4*r)/2+sin(8*r)/4)*100 + sqrt(abs(sin(r))) * 10 * uniform(-1, 1, random()) + 100');
insert into tag (tag_uid, tagname, dscr) values(27, 'slow_sine_constant_rate','sin(r)*100 + 100');
insert into tag (tag_uid, tagname, dscr) values(28, 'fast_sine_constant_rate','sin(r)*100 + 100');
insert into tag (tag_uid, tagname, dscr) values(29, 'very_slow_sine_constant_rate_short','sin(r)*100 + 100');
insert into tag (tag_uid, tagname, dscr) values(210, 'very_slow_sine_constant_rate_full','sin(r)*100 + 100');
insert into tag (tag_uid, tagname, dscr) values(211, 'vslow_square','sin(t/100) s, case when s>0 then 1 else -1 end');

-------------------------------------------------------------------------------------------------------------------------------------------------    
-------------------------------------------------------------------------------------------------------------------------------------------------

insert into tag_value(tag_uid, tstamp, value_number, d, day_index, second_index, ms_index)
select 
    20 tag_uid,
    tm,
    round(value_number,10) value_number,
    to_date(tm) dstamp,
    datediff(day,to_date('12/31/1899', 'MM/DD/YYYY'), dstamp) day_index,
    date_part('hour', tm) * 3600 + date_part('minute', tm) * 60 + date_part('second', tm) second_index,
    date_part('nanosecond', tm) * 1000 ms_index
from
(with mls as (select row_number() over (order by seq4()) i, uniform(10.0, 20.0, random()) ms from table(generator(rowCount => 1500000)))
select
    sum(m.ms) over (order by m.i) t,
    timestampadd('second', t, to_timestamp('1/1/2023', 'MM/DD/YYYY')) tm,
    t/(2000) r,
    sin(r)*100 + 100 val
from
    mls m);

-------------------------------------------------------------------------------------------------------------------------------------------------    
-------------------------------------------------------------------------------------------------------------------------------------------------

insert into tag_value(tag_uid, tstamp, value_number, d, day_index, second_index, ms_index)
select 
    22 tag_uid,
    tm,
    round(value_number,10) value_number,
    to_date(tm) dstamp,
    datediff(day,to_date('12/31/1899', 'MM/DD/YYYY'), dstamp) day_index,
    date_part('hour', tm) * 3600 + date_part('minute', tm) * 60 + date_part('second', tm) second_index,
    date_part('nanosecond', tm) * 1000 ms_index
from
(with mls as (select row_number() over (order by seq4()) i, uniform(5.0, 150.0, random()) ms from table(generator(rowCount => 1500000)))
select
    sum(m.ms) over (order by m.i) t,
    timestampadd('second', t, to_timestamp('1/1/2023', 'MM/DD/YYYY')) tm,
    t/(500) r,
    sin(r)*100 + 100 val
from
    mls m);
    
-------------------------------------------------------------------------------------------------------------------------------------------------    
-------------------------------------------------------------------------------------------------------------------------------------------------

insert into tag_value(tag_uid, tstamp, value_number, d, day_index, second_index, ms_index)
select 
    21 tag_uid,
    tm,
    round(value_number,10) value_number,
    to_date(tm) dstamp,
    datediff(day,to_date('12/31/1899', 'MM/DD/YYYY'), dstamp) day_index,
    date_part('hour', tm) * 3600 + date_part('minute', tm) * 60 + date_part('second', tm) second_index,
    date_part('nanosecond', tm) * 1000 ms_index
from
(with mls as (select row_number() over (order by seq4()) i, uniform(1, 50.0, random()) ms from table(generator(rowCount => 1500000)))
select
    sum(m.ms) over (order by m.i) t,
    timestampadd('second', t, to_timestamp('1/1/2023', 'MM/DD/YYYY')) tm,
    t/(500) r,
    Sin(2 * Sin(2 * Sin(2 * Sin(r))))* 100 + 100 val
from
    mls m);
-------------------------------------------------------------------------------------------------------------------------------------------------    
-------------------------------------------------------------------------------------------------------------------------------------------------

insert into tag_value(tag_uid, tstamp, value_number, d, day_index, second_index, ms_index)
select 
    24 tag_uid,
    tm,
    round(value_number,10) value_number,
    to_date(tm) dstamp,
    datediff(day,to_date('12/31/1899', 'MM/DD/YYYY'), dstamp) day_index,
    date_part('hour', tm) * 3600 + date_part('minute', tm) * 60 + date_part('second', tm) second_index,
    date_part('nanosecond', tm) * 1000 ms_index
from
(with mls as (select row_number() over (order by seq4()) i, uniform(1, 50.0, random()) ms from table(generator(rowCount => 1500000)))
select
    sum(m.ms) over (order by m.i) t,
    timestampadd('second', t, to_timestamp('1/1/2023', 'MM/DD/YYYY')) tm,
    t/(500) r,
    (sin(2*r)+sin(4*r)/2+sin(8*r)/4)*100 + 100 val
from
    mls m);
-------------------------------------------------------------------------------------------------------------------------------------------------    
-------------------------------------------------------------------------------------------------------------------------------------------------

insert into tag_value(tag_uid, tstamp, value_number, d, day_index, second_index, ms_index)
select 
    25 tag_uid,
    tm,
    round(value_number,10) value_number,
    to_date(tm) dstamp,
    datediff(day,to_date('12/31/1899', 'MM/DD/YYYY'), dstamp) day_index,
    date_part('hour', tm) * 3600 + date_part('minute', tm) * 60 + date_part('second', tm) second_index,
    date_part('nanosecond', tm) * 1000 ms_index
from
(with mls as (select row_number() over (order by seq4()) i, uniform(1, 5.0, random()) ms from table(generator(rowCount => 1500000)))
select
    sum(m.ms) over (order by m.i) t,
    timestampadd('second', t, to_timestamp('1/1/2023', 'MM/DD/YYYY')) tm,
    t/(500) r,
    (sin(2*r)+sin(4*r)/2+sin(8*r)/4)*100 + sqrt(abs(sin(r))) * 10 * uniform(-1, 1, random()) + 100 val
from
    mls m);
-------------------------------------------------------------------------------------------------------------------------------------------------    
-------------------------------------------------------------------------------------------------------------------------------------------------

insert into tag_value(tag_uid, tstamp, value_number, d, day_index, second_index, ms_index)
select 
    26 tag_uid,
    tm,
    round(value_number,10) value_number,
    to_date(tm) dstamp,
    datediff(day,to_date('12/31/1899', 'MM/DD/YYYY'), dstamp) day_index,
    date_part('hour', tm) * 3600 + date_part('minute', tm) * 60 + date_part('second', tm) second_index,
    date_part('nanosecond', tm) * 1000 ms_index
from
(with mls as (select row_number() over (order by seq4()) i, uniform(1, 20.0, random()) ms from table(generator(rowCount => 1500000)))
select
    sum(m.ms) over (order by m.i) t,
    timestampadd('second', t, to_timestamp('1/1/2023', 'MM/DD/YYYY')) tm,
    mod(t/100, 10)*10 val
from
    mls m);
-------------------------------------------------------------------------------------------------------------------------------------------------    
-------------------------------------------------------------------------------------------------------------------------------------------------

insert into tag_value(tag_uid, tstamp, value_number, d, day_index, second_index, ms_index)
select 
    27 tag_uid,
    tm,
    round(value_number,10) value_number,
    to_date(tm) dstamp,
    datediff(day,to_date('12/31/1899', 'MM/DD/YYYY'), dstamp) day_index,
    date_part('hour', tm) * 3600 + date_part('minute', tm) * 60 + date_part('second', tm) second_index,
    date_part('nanosecond', tm) * 1000 ms_index
from
(with mls as (select row_number() over (order by seq4()) n from table(generator(rowCount => 1500000)))
select
    n * 5 t,
    timestampadd('second', t, to_timestamp('1/1/2023', 'MM/DD/YYYY')) tm,
    t/(100) r,
    sin(r)*100 + 100 val
from
    mls m);
-------------------------------------------------------------------------------------------------------------------------------------------------    
-------------------------------------------------------------------------------------------------------------------------------------------------

insert into tag_value(tag_uid, tstamp, value_number, d, day_index, second_index, ms_index)
select 
    28 tag_uid,
    tm,
    round(value_number,10) value_number,
    to_date(tm) dstamp,
    datediff(day,to_date('12/31/1899', 'MM/DD/YYYY'), dstamp) day_index,
    date_part('hour', tm) * 3600 + date_part('minute', tm) * 60 + date_part('second', tm) second_index,
    date_part('nanosecond', tm) * 1000 ms_index
from
(with mls as (select row_number() over (order by seq4()) n from table(generator(rowCount => 1500000)))
select
    n * 30 t,
    timestampadd('millisecond', t, to_timestamp('1/1/2023', 'MM/DD/YYYY')) tm,
    t/(100) r,
    sin(r)*100 + 100 val
from
    mls m);

-------------------------------------------------------------------------------------------------------------------------------------------------    
-------------------------------------------------------------------------------------------------------------------------------------------------

insert into tag_value(tag_uid, tstamp, value_number, d, day_index, second_index, ms_index)
select 
    210 tag_uid,
    tm,
    round(value_number,10) value_number,
    to_date(tm) dstamp,
    datediff(day,to_date('12/31/1899', 'MM/DD/YYYY'), dstamp) day_index,
    date_part('hour', tm) * 3600 + date_part('minute', tm) * 60 + date_part('second', tm) second_index,
    date_part('nanosecond', tm) * 1000 ms_index
from
(with mls as (select row_number() over (order by seq4()) n from table(generator(rowCount => 1500000)))
select
    n,
    timestampadd('second', n, to_timestamp('1/1/2023', 'MM/DD/YYYY')) tm,
    sin(n*2)*100 + 100 val
from
    mls m);

-------------------------------------------------------------------------------------------------------------------------------------------------    
-------------------------------------------------------------------------------------------------------------------------------------------------    

insert into tag_value(tag_uid, tstamp, value_number, d, day_index, second_index, ms_index)
select 
    211 tag_uid,
    tm,
    round(value_number,10) value_number,
    to_date(tm) dstamp,
    datediff(day,to_date('12/31/1899', 'MM/DD/YYYY'), dstamp) day_index,
    date_part('hour', tm) * 3600 + date_part('minute', tm) * 60 + date_part('second', tm) second_index,
    date_part('nanosecond', tm) * 1000 ms_index
from
(with mls as (select row_number() over (order by seq4()) n from table(generator(rowCount => 1500000)))
select
    n  t,
    timestampadd('minute', t, to_timestamp('1/1/2023', 'MM/DD/YYYY')) tm,
    sin(t/100) s,
    case when s>0 then 1 else -1 end val
from
    mls m) ;

select tag_uid, min(tstamp) min_tstamp, max(tstamp) max_tstamp, count(*) tag_count from tag_value group by tag_uid;
select tag_uid, tstamp, value_number from tag_value where tstamp between '2023-01-01' and '2023-01-01' and tag_uid in (20, 21);


-------------------------------------------------------------------------------------------------------------------------------------------------    
-------------------------------------------------------------------------------------------------------------------------------------------------    

create or replace function tag_value_lin_interpolate_asof(
    v_from_time timestamp_ntz,
    v_to_time timestamp_ntz,
    v_taglist varchar,
    v_samplerate varchar)
returns table (
    tstamp timestamp_ntz,
    tag_uid integer,
    value_number float)
language sql
as
$$
    with
    tg as (
        select to_number(trim(value)) tag_uid from table(split_to_table(v_taglist,','))),
    t as (
        select
            timestampadd('seconds', s.second_index, d.date_value) tstamp,
            tg.tag_uid
        from
            base_second s,
            base_day d,
            tg
        where
            d.date_value between to_date(v_from_time) and to_date(v_to_time)
            and tstamp between v_from_time and v_to_time
            and decode(v_SampleRate, 'S1', s.s1m, 'S2', s.s2m, 'S4', s.s4m, 'S5', s.s5m,
                    'S10', s.s10m, 'S15', s.s15m, 'S20', s.s20m, 'S30', s.s30m,'M1', s.m1m, 'M2', s.m2m, 'M5',
                    s.m5m, 'M10', s.m10m, 'M15', s.m15m, 'M20', s.m20m, 'M30', s.m30m, 'H1', s.h1m, 'H2',
                    s.h2m, 'H3', s.h3m, 'H4', s.h4m, 'H6', s.h6m, 'H12', s.h12m, s.d1m) = 0),
    v as (
        select
            tv.tag_uid,
            tv.tstamp,
            tv.value_number
        from
            tag_value tv,
            tg
        where
            tv.tag_uid = tg.tag_uid
            and tv.d between to_date(v_from_time) and to_date(v_to_time)
            and tv.tstamp between v_from_time and v_to_time),
    lv as (
        select
            t.tstamp,
            v.tstamp raw_ts,
            v.tag_uid,
            v.value_number
        from
            t asof join v match_condition(t.tstamp >= v.tstamp)
            on t.tag_uid = v.tag_uid),
    nv as (
        select
            t.tstamp,
            v.tstamp raw_ts,
            v.tag_uid,
            v.value_number
        from
            t asof join v match_condition(t.tstamp < v.tstamp)
            on t.tag_uid = v.tag_uid),
    tv as (
        select
            t.tstamp,
            t.tag_uid,
            lv.value_number last_val,
            lv.tstamp lv_ts,
            lv.raw_ts lv_raw_ts,
            nv.value_number next_val,
            nv.tstamp nv_ts,
            nv.raw_ts nv_raw_ts
        from
            t,
            lv,
            nv
        where
            t.tstamp = lv.tstamp
            and t.tstamp = nv.tstamp
            and t.tag_uid = nv.tag_uid
            and t.tag_uid = lv.tag_uid),
    cal as (
        select
            tstamp,
            tag_uid,
            timestampdiff(second, lv_raw_ts, nv_raw_ts) tdif_base,
            timestampdiff(second, lv_raw_ts, tstamp) tdif,
            lv_ts,
            nv_ts,
            lv_raw_ts,
            last_val,
            next_val,
            decode(tdif, 0, last_val, last_val + (next_val - last_val) / tdif_base * tdif) ival
        from
            tv)
    select
        tstamp,
        tag_uid,
        ival value_number
    from
        cal
$$
;


select
    'raw '||tag_uid value_type,
    tag_uid,
    tstamp,
    value_number+10 value_number
from
    tag_value where tstamp between '2023-01-01' and '2023-01-01 03:00:00' and tag_uid in (20)
union all
select 
    'lin interpolate '||tag_uid value_type,
    tag_uid,
    tstamp, 
    value_number
from table(tag_value_lin_interpolate_asof(to_timestamp_ntz('2023-01-01'), to_timestamp_ntz('2023-01-01 03:00:00'), '20', 'M5'))
;

